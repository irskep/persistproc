name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
    paths: 
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements-docs.txt'
      - '.github/**/*.yml'
  pull_request:
    # Run on any PR; internal step decides whether to build

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements-docs.txt
          
      - name: Build documentation
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            mkdocs build --strict -f mkdocs-local.yml
          else
            mkdocs build --strict
          fi
          
      - name: Upload Pages artifact (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site'
          
      - name: Upload PR preview artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docs-preview-pr-${{ github.event.number }}
          path: './site'
          retention-days: 30

  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  comment:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pull-requests: write
    steps:
      - name: Comment with download link
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const runId = context.runId;
            const repo = context.repo.owner + '/' + context.repo.repo;
            const commentBody = `ðŸ“š **Documentation Preview**

Download the built documentation artifact for this PR:

ðŸ‘‰ https://github.com/${repo}/actions/runs/${runId}

Extract the ZIP and open index.html in your browser.`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            const existing = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes('Documentation Preview'));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }